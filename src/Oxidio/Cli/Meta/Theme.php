<?php declare(strict_types=1);
/**
 * Copyright (C) oxidio. See LICENSE file for license details.
 */

namespace Oxidio\Cli\Meta;

use Oxidio\Meta\Provider;
use Php;
use OxidEsales\Eshop;

class Theme
{
    /**
     * Analyze and generate theme namespace constants (templates, blocks, includes)
     *
     * @param Php\Cli\IO $io
     * @param bool       $filterBlock   Filter templates with blocks
     * @param bool       $filterInclude Filter templates with includes
     * @param string     $basePath      [%OX_BASE_PATH% . Application/views/flow/tpl/]
     * @param string     $themeNs       Namespace for theme constants [OxidEsales\Eshop\Core\Theme]
     * @param string     $glob          [** / *.tpl]
     */
    public function __invoke(
        Php\Cli\IO $io,
        bool $filterBlock,
        bool $filterInclude,
        string $basePath = OX_BASE_PATH . 'Application/views/flow/tpl/',
        string $themeNs = Eshop\Core\Theme::class,
        string $glob = '**/*.tpl'
    ) {
        $provider = new Provider(['themeNs' => $themeNs]);

        foreach ($provider->templates($basePath . $glob) as $template) {
            if ($filterBlock && !$template->blocks) {
                continue;
            }
            if ($filterInclude && !$template->includes) {
                continue;
            }
            $io->isVerbose() && (static function () use ($io, $template): void {
                $keyValue = function (string $value, string $key) {
                    yield "$key ($value)";
                };
                $io->title("{$template->const->shortName} ({$template->name})");
                $io->isVeryVerbose() && $io->listing(Php::arr($template->blocks, $keyValue));
                $io->isVeryVerbose() && $io->listing(Php::arr($template->includes, $keyValue));
            })();

            $template->blocks;
        }

        $io->writeln([
            '<?php',
            '/**',
            ' * Copyright (C) oxidio. See LICENSE file for license details',
            ' *',
            " * autogenerated by {$io->getInput()}",
            ' */',
            '/** @noinspection SpellCheckingInspection */',
            '',
        ]);

        foreach ($provider->namespaces as $namespace) {
            foreach ($namespace->toPhp() as $line) {
                $io->writeln($line);
            }
            $io->writeln('');
        }
    }
}
